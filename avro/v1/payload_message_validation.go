// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     order_validation_message.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type PayloadMessageValidation struct {
	Courier_id *UnionStringNull `json:"courier_id"`
}

const PayloadMessageValidationAvroCRC64Fingerprint = "\xfa\x987\x15\xac\xbb\xfc\""

func NewPayloadMessageValidation() PayloadMessageValidation {
	r := PayloadMessageValidation{}
	r.Courier_id = NewUnionStringNull()

	return r
}

func DeserializePayloadMessageValidation(r io.Reader) (PayloadMessageValidation, error) {
	t := NewPayloadMessageValidation()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePayloadMessageValidationFromSchema(r io.Reader, schema string) (PayloadMessageValidation, error) {
	t := NewPayloadMessageValidation()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePayloadMessageValidation(r PayloadMessageValidation, w io.Writer) error {
	var err error
	err = writeUnionStringNull(r.Courier_id, w)
	if err != nil {
		return err
	}
	return err
}

func (r PayloadMessageValidation) Serialize(w io.Writer) error {
	return writePayloadMessageValidation(r, w)
}

func (r PayloadMessageValidation) Schema() string {
	return "{\"fields\":[{\"name\":\"courier_id\",\"type\":[{\"logicalType\":\"uuid\",\"type\":\"string\"},\"null\"]}],\"name\":\"PayloadMessageValidation\",\"type\":\"record\"}"
}

func (r PayloadMessageValidation) SchemaName() string {
	return "PayloadMessageValidation"
}

func (_ PayloadMessageValidation) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ PayloadMessageValidation) SetInt(v int32)       { panic("Unsupported operation") }
func (_ PayloadMessageValidation) SetLong(v int64)      { panic("Unsupported operation") }
func (_ PayloadMessageValidation) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ PayloadMessageValidation) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ PayloadMessageValidation) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ PayloadMessageValidation) SetString(v string)   { panic("Unsupported operation") }
func (_ PayloadMessageValidation) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *PayloadMessageValidation) Get(i int) types.Field {
	switch i {
	case 0:
		r.Courier_id = NewUnionStringNull()

		return r.Courier_id
	}
	panic("Unknown field index")
}

func (r *PayloadMessageValidation) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *PayloadMessageValidation) NullField(i int) {
	switch i {
	case 0:
		r.Courier_id = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ PayloadMessageValidation) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ PayloadMessageValidation) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ PayloadMessageValidation) HintSize(int)                     { panic("Unsupported operation") }
func (_ PayloadMessageValidation) Finalize()                        {}

func (_ PayloadMessageValidation) AvroCRC64Fingerprint() []byte {
	return []byte(PayloadMessageValidationAvroCRC64Fingerprint)
}

func (r PayloadMessageValidation) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["courier_id"], err = json.Marshal(r.Courier_id)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *PayloadMessageValidation) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["courier_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Courier_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for courier_id")
	}
	return nil
}
