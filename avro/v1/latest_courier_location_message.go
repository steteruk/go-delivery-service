// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     location_message_schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// this event describes latest coords courier and we can track movement courier.
type LatestCourierLocationMessage struct {
	Courier_id string `json:"courier_id"`

	Latitude float64 `json:"latitude"`

	Longitude float64 `json:"longitude"`

	Created_at int64 `json:"created_at"`
}

const LatestCourierLocationMessageAvroCRC64Fingerprint = "\x15APo\xdeÂ¥\x11"

func NewLatestCourierLocationMessage() LatestCourierLocationMessage {
	r := LatestCourierLocationMessage{}
	return r
}

func DeserializeLatestCourierLocationMessage(r io.Reader) (LatestCourierLocationMessage, error) {
	t := NewLatestCourierLocationMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeLatestCourierLocationMessageFromSchema(r io.Reader, schema string) (LatestCourierLocationMessage, error) {
	t := NewLatestCourierLocationMessage()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeLatestCourierLocationMessage(r LatestCourierLocationMessage, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Courier_id, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Latitude, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Longitude, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Created_at, w)
	if err != nil {
		return err
	}
	return err
}

func (r LatestCourierLocationMessage) Serialize(w io.Writer) error {
	return writeLatestCourierLocationMessage(r, w)
}

func (r LatestCourierLocationMessage) Schema() string {
	return "{\"doc\":\"this event describes latest coords courier and we can track movement courier.\",\"fields\":[{\"name\":\"courier_id\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"double\"},{\"name\":\"longitude\",\"type\":\"double\"},{\"name\":\"created_at\",\"type\":{\"logicalType\":\"timestamp-millis\",\"type\":\"long\"}}],\"name\":\"LatestCourierLocationMessage\",\"type\":\"record\"}"
}

func (r LatestCourierLocationMessage) SchemaName() string {
	return "LatestCourierLocationMessage"
}

func (_ LatestCourierLocationMessage) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) SetInt(v int32)       { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) SetLong(v int64)      { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) SetString(v string)   { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *LatestCourierLocationMessage) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Courier_id}

		return w

	case 1:
		w := types.Double{Target: &r.Latitude}

		return w

	case 2:
		w := types.Double{Target: &r.Longitude}

		return w

	case 3:
		w := types.Long{Target: &r.Created_at}

		return w

	}
	panic("Unknown field index")
}

func (r *LatestCourierLocationMessage) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *LatestCourierLocationMessage) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ LatestCourierLocationMessage) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ LatestCourierLocationMessage) AppendArray() types.Field { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) HintSize(int)             { panic("Unsupported operation") }
func (_ LatestCourierLocationMessage) Finalize()                {}

func (_ LatestCourierLocationMessage) AvroCRC64Fingerprint() []byte {
	return []byte(LatestCourierLocationMessageAvroCRC64Fingerprint)
}

func (r LatestCourierLocationMessage) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["courier_id"], err = json.Marshal(r.Courier_id)
	if err != nil {
		return nil, err
	}
	output["latitude"], err = json.Marshal(r.Latitude)
	if err != nil {
		return nil, err
	}
	output["longitude"], err = json.Marshal(r.Longitude)
	if err != nil {
		return nil, err
	}
	output["created_at"], err = json.Marshal(r.Created_at)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *LatestCourierLocationMessage) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["courier_id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Courier_id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for courier_id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["latitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Latitude); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for latitude")
	}
	val = func() json.RawMessage {
		if v, ok := fields["longitude"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Longitude); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for longitude")
	}
	val = func() json.RawMessage {
		if v, ok := fields["created_at"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created_at); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for created_at")
	}
	return nil
}
