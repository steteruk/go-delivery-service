// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     order_message.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

// this event describes the state of the order when it is created or updated, for example undergoing validation. The moment an order is created can be listened to by other services, for example the courier service, in order to assign a courier, the order identifier is used as a key for the partition in order to save the entire life cycle in the correct sequence
type OrderMessage struct {
	Event string `json:"event"`

	Payload OrderMessagePayload `json:"Payload"`
}

const OrderMessageAvroCRC64Fingerprint = "%\xa4{$P3\f\xb3"

func NewOrderMessage() OrderMessage {
	r := OrderMessage{}
	r.Payload = NewOrderMessagePayload()

	return r
}

func DeserializeOrderMessage(r io.Reader) (OrderMessage, error) {
	t := NewOrderMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeOrderMessageFromSchema(r io.Reader, schema string) (OrderMessage, error) {
	t := NewOrderMessage()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeOrderMessage(r OrderMessage, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Event, w)
	if err != nil {
		return err
	}
	err = writeOrderMessagePayload(r.Payload, w)
	if err != nil {
		return err
	}
	return err
}

func (r OrderMessage) Serialize(w io.Writer) error {
	return writeOrderMessage(r, w)
}

func (r OrderMessage) Schema() string {
	return "{\"doc\":\"this event describes the state of the order when it is created or updated, for example undergoing validation. The moment an order is created can be listened to by other services, for example the courier service, in order to assign a courier, the order identifier is used as a key for the partition in order to save the entire life cycle in the correct sequence\",\"fields\":[{\"name\":\"event\",\"type\":\"string\"},{\"name\":\"Payload\",\"type\":{\"fields\":[{\"logicalType\":\"UUID\",\"name\":\"order_id\",\"type\":\"string\"}],\"name\":\"OrderMessagePayload\",\"type\":\"record\"}}],\"name\":\"OrderMessage\",\"type\":\"record\"}"
}

func (r OrderMessage) SchemaName() string {
	return "OrderMessage"
}

func (_ OrderMessage) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ OrderMessage) SetInt(v int32)       { panic("Unsupported operation") }
func (_ OrderMessage) SetLong(v int64)      { panic("Unsupported operation") }
func (_ OrderMessage) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ OrderMessage) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ OrderMessage) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ OrderMessage) SetString(v string)   { panic("Unsupported operation") }
func (_ OrderMessage) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *OrderMessage) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Event}

		return w

	case 1:
		r.Payload = NewOrderMessagePayload()

		w := types.Record{Target: &r.Payload}

		return w

	}
	panic("Unknown field index")
}

func (r *OrderMessage) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *OrderMessage) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ OrderMessage) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ OrderMessage) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ OrderMessage) HintSize(int)                     { panic("Unsupported operation") }
func (_ OrderMessage) Finalize()                        {}

func (_ OrderMessage) AvroCRC64Fingerprint() []byte {
	return []byte(OrderMessageAvroCRC64Fingerprint)
}

func (r OrderMessage) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["event"], err = json.Marshal(r.Event)
	if err != nil {
		return nil, err
	}
	output["Payload"], err = json.Marshal(r.Payload)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *OrderMessage) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["event"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Event); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for event")
	}
	val = func() json.RawMessage {
		if v, ok := fields["Payload"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Payload); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for Payload")
	}
	return nil
}
