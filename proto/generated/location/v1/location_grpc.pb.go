// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/generated/location/v1/location.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CourierPositionService_GetCourierLatestPosition_FullMethodName = "/location.CourierPositionService/GetCourierLatestPosition"
)

// CourierPositionServiceClient is the client API for CourierPositionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierPositionServiceClient interface {
	GetCourierLatestPosition(ctx context.Context, in *GetCourierLatestPositionRequest, opts ...grpc.CallOption) (*GetCourierLatestPositionResponse, error)
}

type courierPositionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierPositionServiceClient(cc grpc.ClientConnInterface) CourierPositionServiceClient {
	return &courierPositionServiceClient{cc}
}

func (c *courierPositionServiceClient) GetCourierLatestPosition(ctx context.Context, in *GetCourierLatestPositionRequest, opts ...grpc.CallOption) (*GetCourierLatestPositionResponse, error) {
	out := new(GetCourierLatestPositionResponse)
	err := c.cc.Invoke(ctx, CourierPositionService_GetCourierLatestPosition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierPositionServiceServer is the server API for CourierPositionService service.
// All implementations must embed UnimplementedCourierPositionServiceServer
// for forward compatibility
type CourierPositionServiceServer interface {
	GetCourierLatestPosition(context.Context, *GetCourierLatestPositionRequest) (*GetCourierLatestPositionResponse, error)
	mustEmbedUnimplementedCourierPositionServiceServer()
}

// UnimplementedCourierPositionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourierPositionServiceServer struct {
}

func (UnimplementedCourierPositionServiceServer) GetCourierLatestPosition(context.Context, *GetCourierLatestPositionRequest) (*GetCourierLatestPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierLatestPosition not implemented")
}
func (UnimplementedCourierPositionServiceServer) mustEmbedUnimplementedCourierPositionServiceServer() {
}

// UnsafeCourierPositionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierPositionServiceServer will
// result in compilation errors.
type UnsafeCourierPositionServiceServer interface {
	mustEmbedUnimplementedCourierPositionServiceServer()
}

func RegisterCourierPositionServiceServer(s grpc.ServiceRegistrar, srv CourierPositionServiceServer) {
	s.RegisterService(&CourierPositionService_ServiceDesc, srv)
}

func _CourierPositionService_GetCourierLatestPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierLatestPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierPositionServiceServer).GetCourierLatestPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierPositionService_GetCourierLatestPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierPositionServiceServer).GetCourierLatestPosition(ctx, req.(*GetCourierLatestPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierPositionService_ServiceDesc is the grpc.ServiceDesc for CourierPositionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierPositionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "location.CourierPositionService",
	HandlerType: (*CourierPositionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourierLatestPosition",
			Handler:    _CourierPositionService_GetCourierLatestPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/generated/location/v1/location.proto",
}
